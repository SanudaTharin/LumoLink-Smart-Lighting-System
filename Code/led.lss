
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005e  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000120  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e4  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000119  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000af  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  000005fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  7a:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_Init>:

volatile char receivedData = '0';

void USART_Init(unsigned int ubrr) {
    // Set baud rate
    UBRRH = (unsigned char)(ubrr >> 8);
  82:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char)ubrr;
  84:	89 b9       	out	0x09, r24	; 9
    // Enable receiver and enable received data interrupt
    UCSRB = (1 << RXEN) | (1 << RXCIE);
  86:	80 e9       	ldi	r24, 0x90	; 144
  88:	8a b9       	out	0x0a, r24	; 10
    // Set frame format: 8 data, 1 stop bit
    UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
}
  8e:	08 95       	ret

00000090 <__vector_13>:

ISR(USART_RXC_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
    receivedData = UDR;
  9c:	8c b1       	in	r24, 0x0c	; 12
  9e:	80 93 60 00 	sts	0x0060, r24
}
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <USART_Transmit>:

void USART_Transmit(unsigned char data) {
    // Wait for empty transmit buffer
    while (!(UCSRA & (1 << UDRE)))
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <USART_Transmit>
        ;
    // Put data into buffer, send the data
    UDR = data;
  b2:	8c b9       	out	0x0c, r24	; 12
}
  b4:	08 95       	ret

000000b6 <main>:

volatile char receivedData = '0';

void USART_Init(unsigned int ubrr) {
    // Set baud rate
    UBRRH = (unsigned char)(ubrr >> 8);
  b6:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char)ubrr;
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	89 b9       	out	0x09, r24	; 9
    // Enable receiver and enable received data interrupt
    UCSRB = (1 << RXEN) | (1 << RXCIE);
  bc:	80 e9       	ldi	r24, 0x90	; 144
  be:	8a b9       	out	0x0a, r24	; 10
    // Set frame format: 8 data, 1 stop bit
    UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
int main(void) {
    // Initialize UART with a baud rate of 9600
    USART_Init(UBRR_VAL);

    // Set PB0 as an output (LED)
    DDRB |= (1 << PB0);
  c4:	b8 9a       	sbi	0x17, 0	; 23

    // Enable global interrupt
    sei();
  c6:	78 94       	sei
            PORTB |= (1 << PB0);
        } else if (receivedData == '0') {
            // Turn off the LED
            PORTB &= ~(1 << PB0);
        }
        receivedData = '0'; // Reset received data
  c8:	90 e3       	ldi	r25, 0x30	; 48

    // Enable global interrupt
    sei();

    while (1) {
        if (receivedData == '1') {
  ca:	80 91 60 00 	lds	r24, 0x0060
  ce:	81 33       	cpi	r24, 0x31	; 49
  d0:	11 f4       	brne	.+4      	; 0xd6 <main+0x20>
            // Turn on the LED
            PORTB |= (1 << PB0);
  d2:	c0 9a       	sbi	0x18, 0	; 24
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <main+0x2a>
        } else if (receivedData == '0') {
  d6:	80 91 60 00 	lds	r24, 0x0060
  da:	80 33       	cpi	r24, 0x30	; 48
  dc:	09 f4       	brne	.+2      	; 0xe0 <main+0x2a>
            // Turn off the LED
            PORTB &= ~(1 << PB0);
  de:	c0 98       	cbi	0x18, 0	; 24
        }
        receivedData = '0'; // Reset received data
  e0:	90 93 60 00 	sts	0x0060, r25
  e4:	f2 cf       	rjmp	.-28     	; 0xca <main+0x14>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
